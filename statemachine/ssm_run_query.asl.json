{
  "Comment": "Amazon States Language using DynamoDB and SSM ",
  "StartAt": "GetInstanceId",
  "States": {
    "GetInstanceId": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${DynamoDBTableTheater}",
        "Key": {
          "TheaterId": {
            "S.$": "$.data.ClientId"
          }
        }
      },
      "ResultSelector": {
        "Id.$": "$.Item.InstanceId.S"
      },
      "ResultPath": "$.InstanceId",
      "TimeoutSeconds": 300,
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDb.ConditionalCheckFailedException",
            "DynamoDb.ProvisionedThroughputExceededException",
            "DynamoDb.ResourceNotFoundException"
          ],
          "ResultPath": "$.error",
          "Next": "Fail"
        }
      ],
      "Next": "GetInstanceStatus"
    },
    "GetInstanceStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ssm:describeInstanceInformation",
      "Parameters": {
        "Filters": [
          {
            "Key": "InstanceIds",
            "Values.$": "States.Array($.InstanceId.Id)"
          }
        ]
      },
      "TimeoutSeconds": 300,
      "Catch": [
        {
          "ErrorEquals": [
            "Ssm.InternalServerError",
            "Ssm.InvalidInstanceId"
          ],
          "ResultPath": "$.error",
          "Next": "Fail"
        }
      ],
      "ResultSelector": {
        "Info.$": "$.InstanceInformationList[0]"
      },
      "ResultPath": "$.InstanceStatus",
      "Next": "CheckInstanceStatus"
    },
    "CheckInstanceStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.InstanceStatus.Info.PingStatus",
          "StringEquals": "Online",
          "Next": "CheckPath"
        }
      ],
      "Default": "Fail"
    },
    "CheckPath": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.resourcePath.path",
          "StringEquals": "/run",
          "Next": "Variables"
        },
        {
          "Variable": "$.resourcePath.path",
          "StringEquals": "/query",
          "Next": "QueryCommand"
        }
      ],
      "Default": "Fail"
    },
    "Variables": {
      "Type": "Pass",
      "Parameters": {
        "date": { "Fn::Sub": "${States.FormatDate(yyyy-MM-dd, $.Time)}" },
        "folderName": { "Fn::Select": [ -1, { "Fn::Split": [ "/", "$.data.DestinationPath" ] } ] }
      },
      "Result": {
        "serverHashKey": {
          "Fn::Sub": "FolderIntegrity/Server/${date}/${folderName}/source.csv"
        },
        "clientHashKey": {
          "Fn::Sub": "FolderIntegrity/Client/${date}/${folderName}/source.csv"
        },
        "date": { "Fn::Sub": "${States.FormatDate(yyyy-MM-dd, $.Time)}" }
      },
      "ResultPath": "$.Variables",
      "Next": "CheckS3Key"
    },
    "CheckS3Key": {
      "Type": "Task",
      "Resource": "arn:aws:states:::s3:headObject",
      "Parameters": {
        "Bucket": "${S3Bucket}",
        "Key.$": "$.Variables.serverHashKey"
      },
      "TimeoutSeconds": 300,
      "Catch": [
        {
          "ErrorEquals": [
            "S3.NotFound"
          ],
          "ResultPath": "$.error",
          "Next": "RunCommandHash"
        }
      ],
      "ResultPath": "$.S3Key",
      "Next": "RunCommand"
    },
    "RunCommandHash": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
      "Parameters": {
        "DocumentName": "${SSMDocumentNameHash}",
        "DocumentVersion": "$LATEST",
        "InstanceIds.$": "States.Array($.InstanceId.Id)",
        "ServiceRoleArn": "${SSMServiceRoleArn}",
        
        "TimeoutSeconds": 3600,
        "Comment.$": "$.data.ClientId",
        "Parameters": {
          "SourcePath": [
            "States.StringToJson($.data.SourcePath)"
          ],
          "APIURL": [
            "States.StringToJson($.data.APIURL)"
          ],
          "GenerateHash": [
            "States.StringToJson($.data.GenerateHash)"
          ],
          "Date": [
            "States.StringToJson($.Variables.date)"
          ]
        }        
      },
      "TimeoutSeconds": 300,
      "Catch": [
        {
          "ErrorEquals": [
            "Ssm.InvalidCommandId",
            "Ssm.InvalidDocument",
            "Ssm.InvalidInstanceId",
            "Ssm.InvalidOutputFolder"
          ],
          "ResultPath": "$.error",
          "Next": "Fail"
        }],
      "ResultPath": "$.CommandId",
      "Next": "RunCommand"
    },

    "RunCommand": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
      "Parameters": {
        "DocumentName": "${SSMDocumentName}",
        "DocumentVersion": "$LATEST",
        "InstanceIds.$": "States.Array($.InstanceId.Id)",
        "ServiceRoleArn": "${SSMServiceRoleArn}",
        "NotificationConfig": {
          "NotificationArn": "${SSMNotificationArn}",
          "NotificationEvents": [
            "Success",
            "TimedOut",
            "Cancelled",
            "Failed"
          ],
          "NotificationType": "Invocation"
        },
        "TimeoutSeconds": 3600,
        "Comment.$": "$.data.ClientId",
        "Parameters": {
          "SourcePath": [
            "States.StringToJson($.data.SourcePath)"
          ],
          "DestinationPathL": [
            "States.StringToJson($.data.DestinationPath)"
          ],
          "APIGatewayUrl": [
            "States.StringToJson($.data.APIURL)"
          ],
          "Date": [
            "States.StringToJson($.Variables.date)"
          ],
          "GenerateHash": [
            "States.StringToJson($.data.GenerateHash)"
          ],
          "ClientId": [
            "States.StringToJson($.data.ClientId)"
          ],
          "LogParser": [
            "States.StringToJson($.data.LogParser)"
          ]
        }        
      },
      "TimeoutSeconds": 300,
      "Catch": [
        {
          "ErrorEquals": [
            "Ssm.InvalidCommandId",
            "Ssm.InvalidDocument",
            "Ssm.InvalidInstanceId",
            "Ssm.InvalidOutputFolder"
          ],
          "ResultPath": "$.error",
          "Next": "Fail"
        }],
      "ResultPath": "$.CommandId",
      "Next": "FormatOutputRun"
    },
    "QueryCommand": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ssm:getCommandInvocation",
      "Parameters": {
        "CommandId.$": "$.data.JobId",
        "InstanceId.$": "$.InstanceId.Id"
      },
      "TimeoutSeconds": 300,
      "Catch": [
        {
          "ErrorEquals": [
            "Ssm.InvalidCommandId",
            "Ssm.InvalidInstanceId"
          ],
          "ResultPath": "$.error",
          "Next": "Fail"
        }],
      "ResultPath": "$.CommandStatus",
      "Next": "FormatOutputQuery"
    },
    "FormatOutputQuery": {
      "Type": "Pass",
      "Parameters": {
        "ClientId.$": "$.data.ClientId",
        "JobId.$": "$.data.JobId",
        "InstanceId.$": "$.InstanceId.Id",
        "ExecutionStartDateTime.$": "$.CommandStatus.ExecutionStartDateTime",
        "ExecutionElapsedTime.$": "$.CommandStatus.ExecutionElapsedTime",
        "ExecutionEndDateTime.$": "$.CommandStatus.ExecutionEndDateTime",
        "StandardErrorContent.$": "$.CommandStatus.StandardErrorContent",
        "Status.$": "$.CommandStatus.Status",
        "ClientStatus.$": "$.InstanceStatus.Info.PingStatus"
      },
      "ResultPath": "$.CleanOutput",
      "Next": "Response"
    },
    "FormatOutputRun": {
      "Type": "Pass",
      "Parameters": {
        "ClientId.$": "$.data.ClientId",
        "JobId.$": "$.CommandId.Command.CommandId",
        "InstanceId.$": "$.InstanceId.Id",
        "Status.$": "$.CommandId.Command.Status",
        "ClientStatus.$": "$.InstanceStatus.Info.PingStatus"
      },
      "ResultPath": "$.CleanOutput",
      "Next": "Response"
    },
    "Fail": {
      "Type": "Fail",
      "Error": "Failed to get instance status",
      "Cause": "See error details in $error"
    },
    "Response": {
      "Type": "Pass",
      "InputPath": "$.CleanOutput",
      "ResultPath": "$.output",
      "OutputPath": "$.output",
      "End": true
    }
  }
}